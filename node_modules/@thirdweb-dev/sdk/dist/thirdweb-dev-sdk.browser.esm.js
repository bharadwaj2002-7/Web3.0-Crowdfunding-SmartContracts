export { A as APPROVED_IMPLEMENTATIONS, C as ContractDeployer, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, c as checkClientIdOrSecretKey, d as checkVerificationStatus, f as computeCloneFactoryAddress, s as convertParamValues, k as deployCreate2Factory, l as directDeployDeterministic, n as directDeployDeterministicPublished, m as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, a as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, w as getApprovedImplementation, x as getDefaultTrustedForwarders, t as getDeployArguments, j as getEncodedConstructorParamsForThirdwebContract, h as getThirdwebContractAddress, u as getTrustedForwarders, i as isVerifiedOnEtherscan, o as predictAddressDeterministic, r as predictAddressDeterministicPublished, q as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, b as verify, v as verifyThirdwebPrebuiltImplementation } from './sdk-86c84e2d.browser.esm.js';
export { G as ALL_ROLES, bl as AbiObjectSchema, bm as AbiSchema, bk as AbiTypeSchema, bc as AddressOrEnsSchema, bb as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bf as BYOCContractMetadataSchema, b8 as BigNumberSchema, ba as BigNumberTransformSchema, b9 as BigNumberishSchema, au as COMMON_FACTORY, C as CONTRACTS_MAP, aR as CONTRACT_ADDRESSES, as as CREATE2_FACTORY_BYTECODE, bd as CallOverrideSchema, aV as ChainId, bo as ChainIdToAddressSchema, bF as CommonContractOutputSchema, bE as CommonContractSchema, bI as CommonPlatformFeeSchema, bH as CommonPrimarySaleSchema, bG as CommonRoyaltySchema, bK as CommonSymbolSchema, bJ as CommonTrustedForwarderSchema, bC as CompilerMetadataFetchedSchema, bB as ContractInfoSchema, bi as CustomContractDeploy, bg as CustomContractInput, bh as CustomContractOutput, bj as CustomContractSchema, bp as CustomFactoryInput, ax as DEPLOYER_ABI, aw as DEPLOYER_BYTECODE, br as DeployTypeInput, bt as DeploymentNetworkInput, bX as DropErc1155ContractDeploy, bV as DropErc1155ContractInput, bW as DropErc1155ContractOutput, bY as DropErc1155ContractSchema, bT as DropErc721ContractDeploy, bR as DropErc721ContractInput, bS as DropErc721ContractOutput, bU as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, b0 as EventType, x as ExtensionNotImplementedError, bu as ExtraPublishMetadataSchemaInput, bv as ExtraPublishMetadataSchemaOutput, bq as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bw as FullPublishMetadataSchemaInput, bx as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, av as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, a$ as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, b$ as MarketplaceContractDeploy, bZ as MarketplaceContractInput, b_ as MarketplaceContractOutput, c0 as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bL as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, c as MultiwrapInitializer, aZ as NATIVE_TOKENS, aY as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aQ as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c3 as PackContractDeploy, c1 as PackContractInput, c2 as PackContractOutput, c4 as PackContractSchema, P as PackInitializer, bn as PreDeployMetadata, bD as PreDeployMetadataFetchedSchema, by as ProfileSchemaInput, bz as ProfileSchemaOutput, cr as ProposalOutputSchema, bA as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, bs as RouterTypeInput, be as SDKOptionsSchema, at as SIGNATURE, b7 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bM as SnapshotEntryInput, bO as SnapshotEntryWithProofSchema, bQ as SnapshotInfoSchema, bN as SnapshotInputSchema, bP as SnapshotSchema, f as SplitInitializer, c7 as SplitsContractDeploy, c5 as SplitsContractInput, c6 as SplitsContractOutput, c8 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aK as THIRDWEB_DEPLOYER, T as TokenDropInitializer, cj as TokenErc1155ContractDeploy, ch as TokenErc1155ContractInput, ci as TokenErc1155ContractOutput, ck as TokenErc1155ContractSchema, cb as TokenErc20ContractDeploy, c9 as TokenErc20ContractInput, ca as TokenErc20ContractOutput, cc as TokenErc20ContractSchema, cf as TokenErc721ContractDeploy, cd as TokenErc721ContractInput, ce as TokenErc721ContractOutput, cg as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, cp as VoteContractDeploy, cn as VoteContractInput, co as VoteContractOutput, cq as VoteContractSchema, V as VoteInitializer, cl as VoteSettingsInputSchema, cm as VoteSettingsOuputSchema, W as WrongListingTypeError, aD as computeDeploymentAddress, aH as computeDeploymentInfo, aE as computeEOAForwarderAddress, aF as computeForwarderAddress, ai as constructAbiFromBytecode, ae as detectFeatures, af as detectFeaturesFromBytecode, aI as encodeConstructorParamsForImplementation, a3 as extractCommentFromMetadata, a4 as extractConstructorParamsFromAbi, a5 as extractFunctionsFromAbi, aa as extractIPFSHashFromBytecode, a6 as extractMinimalProxyImplementationAddress, O as fetchAbiFromAddress, aM as fetchAndCacheDeployMetadata, $ as fetchContractMetadata, J as fetchContractMetadataFromAddress, K as fetchContractMetadataFromBytecode, ad as fetchExtendedReleaseMetadata, ac as fetchPreDeployMetadata, aL as fetchPublishedContractFromPolygon, ab as fetchRawPredeployMetadata, ar as fetchSourceFilesFromMetadata, a0 as formatCompilerMetadata, aj as getAllDetectedExtensions, ah as getAllDetectedExtensionsFromBytecode, ag as getAllDetectedFeatures, b2 as getChainIdFromNetwork, b3 as getChainIdOrName, b1 as getChainProvider, an as getCompositeABI, aS as getContractAddressByChainId, k as getContractName, aT as getContractPublisherAddress, j as getContractTypeForRemoteName, aA as getCreate2FactoryAddress, aJ as getCreate2FactoryDeploymentInfo, X as getDefaultGasOverrides, Y as getDynamicFeeData, Z as getGasPrice, aC as getInitBytecodeWithSalt, aG as getKeylessTxn, aU as getMultichainRegistryAddress, a_ as getNativeTokenByChainId, _ as getPolygonGasPriorityFee, b5 as getProviderFromRpcUrl, H as getRoleHash, aB as getSaltHash, b6 as getSignerAndProvider, aX as getSupportedChains, a1 as hasMatchingAbi, B as includesErrorMessage, b4 as isChainConfig, ay as isContractDeployed, aq as isDowngradeVersion, az as isEIP155Enforced, al as isExtensionEnabled, ak as isFeatureEnabled, ap as isIncrementalVersion, l as isProvider, m as isSigner, am as joinABIs, a2 as matchesAbiFromBytecode, z as parseRevertReason, aO as resolveAddress, a8 as resolveContractUriAndBytecode, a7 as resolveContractUriFromAddress, aN as resolveEns, a9 as resolveImplementation, aW as setSupportedChains, aP as signTypedDataInternal, ao as toSemver } from './index-b21b6dcf.browser.esm.js';
export { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from './fetchCurrencyValue-395431ac.browser.esm.js';
export { c as cleanCurrencyAddress } from './cleanCurrencyAddress-c7641552.browser.esm.js';
export { n as normalizePriceValue } from './normalizePriceValue-adca7ddb.browser.esm.js';
export { s as setErc20Allowance } from './setErc20Allowance-b3e3abb0.browser.esm.js';
export { B as BaseSignaturePayloadInput, g as ClaimConditionInputArray, e as ClaimConditionInputSchema, d as ClaimConditionMetadataSchema, h as ClaimConditionOutputSchema, C as ClaimEligibility, i as CurrencySchema, j as CurrencyValueSchema, G as GenericRequest, t as MintRequest1155, M as MintRequest20, s as MintRequest721, u as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, n as Signature1155PayloadInput, o as Signature1155PayloadInputWithTokenId, p as Signature1155PayloadOutput, S as Signature20PayloadInput, k as Signature20PayloadOutput, l as Signature721PayloadInput, m as Signature721PayloadOutput, q as Signature721WithQuantityInput, r as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, b as createSnapshot, f as fetchSnapshotEntryForAddress } from './signature-cb664eb2.browser.esm.js';
export { h as hasERC20Allowance } from './hasERC20Allowance-67248ba6.browser.esm.js';
export { f as Erc20, E as Erc20BatchMintable, a as Erc20Burnable, b as Erc20ClaimableWithConditions, c as Erc20Droppable, d as Erc20Mintable, e as Erc20SignatureMintable, n as normalizeAmount } from './erc-20-c62f87b1.browser.esm.js';
export { h as EditionMetadataInputOrUriSchema, f as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, e as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, c as computeNativeTokenAddress, d as deployContractDeterministicRaw, g as getCachedAbiForContract, m as matchesPrebuiltAbi, b as toDisplayValue, t as toEther, a as toUnits } from './token-5d23d733.browser.esm.js';
export { h as Erc721, E as Erc721BatchMintable, j as Erc721Burnable, b as Erc721Claimable, a as Erc721ClaimableWithConditions, f as Erc721Enumerable, c as Erc721LazyMintable, d as Erc721Mintable, e as Erc721Supply, g as Erc721TieredDrop, i as Erc721WithQuantitySignatureMintable, t as toWei } from './erc-721-e1b3acc2.browser.esm.js';
export { P as PAPER_API_URL, a as PaperCheckout, c as createCheckoutLinkIntent, f as fetchRegisteredCheckoutId, p as parseChainIdToPaperChain } from './thirdweb-checkout-b9754534.browser.esm.js';
export { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-09aa35f1.browser.esm.js';
export { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction } from './contract-appuri-a02661ad.browser.esm.js';
export { C as ContractRoles } from './contract-roles-d2fece90.browser.esm.js';
export { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from './contract-owner-2f6b3b38.browser.esm.js';
export { C as ContractPrimarySale } from './contract-sales-cb9b8e5f.browser.esm.js';
export { D as DropClaimConditions } from './drop-claim-conditions-3a72a6b2.browser.esm.js';
export { D as DropErc1155ClaimConditions, e as Erc1155, E as Erc1155BatchMintable, a as Erc1155Burnable, b as Erc1155Enumerable, c as Erc1155LazyMintable, d as Erc1155Mintable, f as Erc1155SignatureMintable } from './erc-1155-4fde2d29.browser.esm.js';
export { D as DropErc1155History } from './drop-erc1155-history-bc8aed31.browser.esm.js';
export { T as TokenERC20History } from './erc-20-history-cc3e0504.browser.esm.js';
export { S as StandardErc20 } from './erc-20-standard-08e06497.browser.esm.js';
export { S as StandardErc721 } from './erc-721-standard-de156570.browser.esm.js';
export { S as StandardErc1155 } from './erc-1155-standard-655aeee5.browser.esm.js';
export { L as ListingType, a as MarketplaceAuction, M as MarketplaceDirect } from './marketplace-auction-9325249e.browser.esm.js';
export { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from './marketplacev3-offers-5665fc94.browser.esm.js';
export { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';
export { C as ContractPlatformFee } from './contract-platform-fee-9718f114.browser.esm.js';
export { A as Account, a as AccountFactory, b as AdminFlag, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, P as PermissionSnapshotSchema, d as SignerPermissionRequest, c as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from './account-factory-d13d8050.browser.esm.js';
export { D as DeployTransaction, T as Transaction, b as biconomySendFunction, d as defaultGaslessSendFunction, a as defenderSendFunction, e as engineSendFunction, p as prepareGaslessRequest } from './transactions-9a468e79.browser.esm.js';
export { e as extractConstructorParams, a as extractFunctions } from './contract-publisher-e8d7b79e.browser.esm.js';
export { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from './assertEnabled-c4c4cb1b.browser.esm.js';
export { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from './deployWithThrowawayDeployer-977fcc44.browser.esm.js';
export { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from './QueryParams-2cf39be7.browser.esm.js';
export { V as VoteType } from './Vote-3b66775c.browser.esm.js';
export { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from './pack-6bce6031.browser.esm.js';
import '@thirdweb-dev/storage';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';
import 'ethers';
import 'eventemitter3';
import 'tiny-invariant';
import '@thirdweb-dev/chains';
import '@thirdweb-dev/generated-abis';
import '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';
import 'zod';
import '@thirdweb-dev/crypto';
import 'bn.js';
import 'bs58';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';
import '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';
import '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';
import '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';
import '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';
import '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';
import 'ethers/lib/utils';
import '@thirdweb-dev/merkletree';
import 'uuid';
import 'fast-deep-equal';
import './marketplace-ad7205f4.browser.esm.js';
import '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';

function getRpcUrl(network, clientId) {
  return `https://${network}.rpc.thirdweb.com/${clientId || ""}`;
}

// handle browser vs node global

// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects
globalThis.global = globalThis;

export { getRpcUrl };
